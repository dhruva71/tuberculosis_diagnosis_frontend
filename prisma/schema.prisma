// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
  binaryTargets = ["linux-musl-openssl-3.0.x", "debian-openssl-3.0.x"]
}

datasource db {
  provider = "sqlite"
  url      = "file:./dev.db"
}

model TuberculosisDiagnosis {
  id        Int      @id @default(autoincrement())
  timestamp DateTime @default(now())
  image     Bytes
  class     String   @default("normal")
}

/// models for NextAuth.js

model User {
  id            String    @id @default(uuid()) // Change id to String with default UUID
  name          String?
  email         String?   @unique
  emailVerified DateTime?
  image         String?
  password      String?
  // accounts       Account[]
  // sessions       Session[]
}

// model Account {
//   id                 Int       @id @default(autoincrement())
//   userId             Int
//   type               String
//   provider           String
//   providerAccountId  String
//   refresh_token      String?
//   access_token       String?
//   expires_at         Int?
//   token_type         String?
//   scope              String?
//   id_token           String?
//   session_state      String?
//
//   user User @relation(fields: [userId], references: [id], onDelete: Cascade)
//
//   @@unique([provider, providerAccountId])
// }

// model Session {
//   id           Int       @id @default(autoincrement())
//   sessionToken String    @unique
//   userId       Int
//   expires      DateTime
//
//   user User @relation(fields: [userId], references: [id], onDelete: Cascade)
// }

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}
